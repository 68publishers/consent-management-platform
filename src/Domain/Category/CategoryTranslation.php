<?php

declare(strict_types=1);

namespace App\Domain\Category;

use App\Domain\Category\ValueObject\Name;
use App\Domain\Shared\ValueObject\Locale;

final class CategoryTranslation
{
	# autogenerated
	private int $id;

	private Category $category;

	private Locale $locale;

	private Name $name;

	private function __construct()
	{
	}

	/**
	 * @param \App\Domain\Category\Category         $category
	 * @param \App\Domain\Shared\ValueObject\Locale $locale
	 * @param \App\Domain\Category\ValueObject\Name $name
	 *
	 * @return static
	 */
	public static function create(Category $category, Locale $locale, Name $name): self
	{
		$categoryTranslation = new self();
		$categoryTranslation->category = $category;
		$categoryTranslation->locale = $locale;
		$categoryTranslation->name = $name;

		return $categoryTranslation;
	}

	/**
	 * @return \App\Domain\Category\Category
	 */
	public function category(): Category
	{
		return $this->category;
	}

	/**
	 * @return \App\Domain\Shared\ValueObject\Locale
	 */
	public function locale(): Locale
	{
		return $this->locale;
	}

	/**
	 * @return \App\Domain\Category\ValueObject\Name
	 */
	public function name(): Name
	{
		return $this->name;
	}

	/**
	 * @param \App\Domain\Category\ValueObject\Name $name
	 *
	 * @return void
	 */
	public function setName(Name $name): void
	{
		$this->name = $name;
	}
}

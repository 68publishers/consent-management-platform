name: Build and push Docker images

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: Git branch or tag
        required: true
        default: main
      version:
        type: string
        description: The version in semver format (e.g. "1.2.3")
        required: true
      platforms:
        type: string
        description: Platforms (comma separated list)
        required: true
        default: linux/amd64
      push_to_dockerhub:
        type: boolean
        description: Push to DockerHub registry
        default: true
      push_to_hpt:
        type: boolean
        description: Push to HPT registry
        default: true

env:
  REGISTRY_HPT: registry2.hptronic.cz
  IMAGE_HPT_APP: registry2.hptronic.cz/dev/cmp/cmp
  IMAGE_HPT_WORKER: registry2.hptronic.cz/dev/cmp/cmp/worker
  IMAGE_DOCKERHUB: 68publishers/cmp

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.vars.outputs.platforms }}
    steps:
      - name: Dump inputs
        run: |
          echo "branch: ${{ github.event.inputs.branch }}"
          echo "version: ${{ github.event.inputs.version }}"
          echo "platforms: ${{ github.event.inputs.platforms }}"
          echo "push_to_dockerhub: ${{ github.event.inputs.push_to_dockerhub }}"
          echo "push_to_hpt: ${{ github.event.inputs.push_to_hpt }}"

      - name: Fail if all push options are disabled
        if: ${{ github.event.inputs.push_to_dockerhub == 'false' && github.event.inputs.push_to_hpt == 'false' }}
        run: |
          echo "Error: At least one of the options push_to_dockerhub or push_to_hpt must be enabled."
          exit 1

      - name: Set platforms output
        id: vars
        run: echo "platforms=$(jq 'split(",")' -Rc <(echo '${{ github.event.inputs.platforms }}'))" >> $GITHUB_OUTPUT

  build:
    name: Build Docker images 68publishers/cmp:app-${{ github.event.inputs.version }} and 68publishers/cmp:worker-${{ github.event.inputs.version }} for platform ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs:
      - setup
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.platforms) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub registry
        uses: docker/login-action@v2
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to HPT registry
        uses: docker/login-action@v2
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        with:
          registry: ${{ env.REGISTRY_HPT }}
          username: ${{ secrets.HPT_REGISTRY_USERNAME }}
          password: ${{ secrets.HPT_REGISTRY_TOKEN }}

      - name: Docker meta (app, DockerHub)
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        id: docker_meta_app_dockerhub
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_DOCKERHUB }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=pr
            type=semver,pattern=app-{{version}},value=${{ github.event.inputs.version }}

      - name: Docker meta (worker, DockerHub)
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        id: docker_meta_worker_dockerhub
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_DOCKERHUB }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=pr
            type=semver,pattern=worker-{{version}},value=${{ github.event.inputs.version }}

      - name: Docker meta (app, HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        id: docker_meta_app_hpt
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_HPT_APP }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}

      - name: Docker meta (worker, HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        id: docker_meta_worker_hpt
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ env.IMAGE_HPT_WORKER }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ github.event.inputs.version }}

      - name: Build and push by digest (app, DockerHub)
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        id: build_app_dockerhub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/Dockerfile
          target: app
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.docker_meta_app_dockerhub.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_DOCKERHUB }},push-by-digest=true,name-canonical=true,push=true
          provenance: false

      - name: Build and push by digest (worker, DockerHub)
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        id: build_worker_dockerhub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/Dockerfile
          target: worker
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.docker_meta_worker_dockerhub.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_DOCKERHUB }},push-by-digest=true,name-canonical=true,push=true
          provenance: false

      - name: Build and push by digest (app, HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        id: build_app_hpt
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/Dockerfile
          target: app
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.docker_meta_app_hpt.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_HPT_APP }},push-by-digest=true,name-canonical=true,push=true
          provenance: false

      - name: Build and push by digest (worker, HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        id: build_worker_hpt
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/build/Dockerfile
          target: worker
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.docker_meta_worker_hpt.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_HPT_WORKER }},push-by-digest=true,name-canonical=true,push=true
          provenance: false

      - name: Export digests (DockerHub)
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        run: |
          mkdir -p /tmp/digests/dockerhub/outputs
          mkdir -p /tmp/digests/dockerhub/images/app
          mkdir -p /tmp/digests/dockerhub/images/worker
          digest_app="${{ steps.build_app_dockerhub.outputs.digest }}"
          digest_worker="${{ steps.build_worker_dockerhub.outputs.digest }}"
          touch "/tmp/digests/dockerhub/images/app/${digest_app#sha256:}"
          touch "/tmp/digests/dockerhub/images/worker/${digest_worker#sha256:}"
          echo "$APP_OUTPUT" > "/tmp/digests/dockerhub/outputs/app"
          echo "$WORKER_OUTPUT" > "/tmp/digests/dockerhub/outputs/worker"
        env:
          APP_OUTPUT: ${{ steps.docker_meta_app_dockerhub.outputs.json }}
          WORKER_OUTPUT: ${{ steps.docker_meta_worker_dockerhub.outputs.json }}

      - name: Export digests (HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        run: |
          mkdir -p /tmp/digests/hpt/outputs
          mkdir -p /tmp/digests/hpt/images/app
          mkdir -p /tmp/digests/hpt/images/worker
          digest_app="${{ steps.build_app_hpt.outputs.digest }}"
          digest_worker="${{ steps.build_worker_hpt.outputs.digest }}"
          touch "/tmp/digests/hpt/images/app/${digest_app#sha256:}"
          touch "/tmp/digests/hpt/images/worker/${digest_worker#sha256:}"
          echo "$APP_OUTPUT" > "/tmp/digests/hpt/outputs/app"
          echo "$WORKER_OUTPUT" > "/tmp/digests/hpt/outputs/worker"
        env:
          APP_OUTPUT: ${{ steps.docker_meta_app_hpt.outputs.json }}
          WORKER_OUTPUT: ${{ steps.docker_meta_worker_hpt.outputs.json }}

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub registry
        uses: docker/login-action@v2
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to HPT registry
        uses: docker/login-action@v2
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        with:
          registry: ${{ env.REGISTRY_HPT }}
          username: ${{ secrets.HPT_REGISTRY_USERNAME }}
          password: ${{ secrets.HPT_REGISTRY_TOKEN }}

      - name: Create manifest list and push (DockerHub)
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        working-directory: /tmp/digests/dockerhub/images
        run: >
          for DIR in *;
          do
            cd "$DIR" && docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< cat "/tmp/digests/dockerhub/outputs/$DIR") $(printf "${{ env.IMAGE_DOCKERHUB }}@sha256:%s " *) && cd ..
          done

      - name: Create manifest list and push (app, HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        working-directory: /tmp/digests/hpt/images/app
        run: >
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< cat "/tmp/digests/hpt/outputs/app") $(printf "${{ env.IMAGE_HPT_APP }}@sha256:%s " *)

      - name: Create manifest list and push (worker, HPT)
        if: ${{ github.event.inputs.push_to_hpt == 'true' }}
        working-directory: /tmp/digests/hpt/images/worker
        run: >
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< cat "/tmp/digests/hpt/outputs/worker") $(printf "${{ env.IMAGE_HPT_WORKER }}@sha256:%s " *)
